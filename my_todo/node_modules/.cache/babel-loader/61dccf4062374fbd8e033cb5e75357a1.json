{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Andly\\\\3D Objects\\\\UPTAG\\\\T.II\\\\prog II\\\\todo\\\\my_todo\\\\src\\\\Component\\\\to_do_app\\\\to_do_app.jsx\";\nimport React, { Component } from \"react\";\nimport { Card, Header, Form, Input, Icon } from \"semantic-ui-react\";\nimport \"./to_do_app.css\";\n\nclass ToDo extends Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = () => {\n      this.getTasks();\n    };\n\n    this.onChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.onSubmit = () => {\n      // check is task is empty string\n      if (this.state.task) {\n        // get the task list from the local storage\n        let tasklist = JSON.parse(localStorage.getItem(\"tasklist\")); // task list is null means empty\n        // create an empty list\n\n        if (tasklist == null) {\n          tasklist = [];\n        } // create task object\n        // default status is false\n\n\n        let task = {\n          task: `? ${this.state.task}`,\n          status: false\n        }; // add the task to the task list\n\n        tasklist.push(task); // save the task list in the local storage\n\n        localStorage.setItem(\"tasklist\", JSON.stringify(tasklist)); // clear the form\n\n        this.setState({\n          task: \"\"\n        }); // refresh the tasks\n\n        this.getTasks();\n      }\n    };\n\n    this.getTasks = () => {\n      // get the task list from the local storage\n      let tasklist = JSON.parse(localStorage.getItem(\"tasklist\")); // check if task list is empty\n\n      if (tasklist) {\n        // sort all the tasks on the basis of status\n        // completed task will move down\n        tasklist = tasklist.sort((a, b) => {\n          if (a.status) {\n            return 1;\n          } else if (b.status) {\n            return -1;\n          }\n\n          return 0;\n        }); // save the task list in the local storage\n\n        localStorage.setItem(\"tasklist\", JSON.stringify(tasklist)); // set the tasklist to the state\n\n        this.setState({\n          // default color\n          // Incomplete: yellow\n          // complete: green\n          tasklist: tasklist.map((item, index) => {\n            let color = \"yellow\";\n            let cardBackground = {\n              background: \"white\"\n            };\n            let taskComplete = {\n              textDecoration: \"none\"\n            };\n\n            if (item.status) {\n              color = \"green\";\n              cardBackground.background = \"beige\";\n              taskComplete[\"textDecoration\"] = \"line-through\";\n            }\n\n            return /*#__PURE__*/React.createElement(Card, {\n              key: index,\n              color: color,\n              fluid: true,\n              style: cardBackground,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 97,\n                columnNumber: 13\n              }\n            }, /*#__PURE__*/React.createElement(Card.Content, {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 98,\n                columnNumber: 15\n              }\n            }, /*#__PURE__*/React.createElement(Card.Header, {\n              textAlign: \"left\",\n              style: taskComplete,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 99,\n                columnNumber: 17\n              }\n            }, /*#__PURE__*/React.createElement(\"div\", {\n              style: {\n                wordWrap: \"break-word\"\n              },\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 100,\n                columnNumber: 19\n              }\n            }, item.task)), /*#__PURE__*/React.createElement(Card.Meta, {\n              textAlign: \"right\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 103,\n                columnNumber: 17\n              }\n            }, /*#__PURE__*/React.createElement(Icon, {\n              link: true,\n              name: \"check circle\",\n              color: \"green\",\n              onClick: () => this.updateTask(index),\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 104,\n                columnNumber: 19\n              }\n            }), /*#__PURE__*/React.createElement(\"span\", {\n              style: {\n                paddingRight: 10\n              },\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 110,\n                columnNumber: 19\n              }\n            }, \"Done\"), /*#__PURE__*/React.createElement(Icon, {\n              link: true,\n              name: \"undo\",\n              color: \"yellow\",\n              onClick: () => this.undoTask(index),\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 111,\n                columnNumber: 19\n              }\n            }), /*#__PURE__*/React.createElement(\"span\", {\n              style: {\n                paddingRight: 10\n              },\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 117,\n                columnNumber: 19\n              }\n            }, \"Undo\"), /*#__PURE__*/React.createElement(Icon, {\n              link: true,\n              name: \"delete\",\n              color: \"red\",\n              onClick: () => this.deleteTask(index),\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 118,\n                columnNumber: 19\n              }\n            }), /*#__PURE__*/React.createElement(\"span\", {\n              style: {\n                paddingRight: 10\n              },\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 124,\n                columnNumber: 19\n              }\n            }, \"Delete\"))));\n          })\n        });\n      }\n    };\n\n    this.updateTask = index => {\n      // get the task list from the local storage\n      let tasklist = JSON.parse(localStorage.getItem(\"tasklist\")); // change status to true\n\n      tasklist[index].status = true; // save the updated task list\n\n      localStorage.setItem(\"tasklist\", JSON.stringify(tasklist)); // refresh the task list\n\n      this.getTasks();\n    };\n\n    this.undoTask = index => {\n      // get the task list from the local storage\n      let tasklist = JSON.parse(localStorage.getItem(\"tasklist\")); // change status to false\n\n      tasklist[index].status = false; // save the updated task list\n\n      localStorage.setItem(\"tasklist\", JSON.stringify(tasklist)); // refresh the task list\n\n      this.getTasks();\n    };\n\n    this.deleteTask = index => {\n      // get the task list from the local storage\n      let tasklist = JSON.parse(localStorage.getItem(\"tasklist\")); // remove the task from the task list\n\n      tasklist.splice(index, 1); // save the updated task list\n\n      localStorage.setItem(\"tasklist\", JSON.stringify(tasklist)); // refresh the task list\n\n      this.getTasks();\n    };\n\n    this.state = {\n      task: \"\",\n      tasklist: []\n    };\n  } // on load get the task list\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      as: \"h1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"app-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 13\n      }\n    }, \"? To Do App\"), \" \")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"app-form\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      onSubmit: this.onSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      type: \"text\",\n      name: \"task\",\n      onChange: this.onChange,\n      value: this.state.task,\n      fluid: true,\n      placeholder: \"task...\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 13\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Card.Group, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 11\n      }\n    }, this.state.tasklist)));\n  }\n\n}\n\nexport default MyTaskList;","map":{"version":3,"sources":["C:/Users/Andly/3D Objects/UPTAG/T.II/prog II/todo/my_todo/src/Component/to_do_app/to_do_app.jsx"],"names":["React","Component","Card","Header","Form","Input","Icon","ToDo","constructor","props","componentDidMount","getTasks","onChange","event","setState","target","name","value","onSubmit","state","task","tasklist","JSON","parse","localStorage","getItem","status","push","setItem","stringify","sort","a","b","map","item","index","color","cardBackground","background","taskComplete","textDecoration","wordWrap","updateTask","paddingRight","undoTask","deleteTask","splice","render","MyTaskList"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Card, Header, Form, Input, Icon } from \"semantic-ui-react\";\r\nimport \"./to_do_app.css\";\r\n\r\nclass ToDo extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      task: \"\",\r\n      tasklist: []\r\n    };\r\n  }\r\n\r\n  // on load get the task list\r\n  componentDidMount = () => {\r\n    this.getTasks();\r\n  };\r\n\r\n  onChange = event => {\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    });\r\n  };\r\n\r\n  // add task to the list\r\n  onSubmit = () => {\r\n    // check is task is empty string\r\n    if (this.state.task) {\r\n      // get the task list from the local storage\r\n      let tasklist = JSON.parse(localStorage.getItem(\"tasklist\"));\r\n\r\n      // task list is null means empty\r\n      // create an empty list\r\n      if (tasklist == null) {\r\n        tasklist = [];\r\n      }\r\n\r\n      // create task object\r\n      // default status is false\r\n      let task = {\r\n        task: `? ${this.state.task}`,\r\n        status: false\r\n      };\r\n\r\n      // add the task to the task list\r\n      tasklist.push(task);\r\n\r\n      // save the task list in the local storage\r\n      localStorage.setItem(\"tasklist\", JSON.stringify(tasklist));\r\n\r\n      // clear the form\r\n      this.setState({ task: \"\" });\r\n\r\n      // refresh the tasks\r\n      this.getTasks();\r\n    }\r\n  };\r\n\r\n  // get all the tasks\r\n  getTasks = () => {\r\n    // get the task list from the local storage\r\n    let tasklist = JSON.parse(localStorage.getItem(\"tasklist\"));\r\n\r\n    // check if task list is empty\r\n    if (tasklist) {\r\n      // sort all the tasks on the basis of status\r\n      // completed task will move down\r\n      tasklist = tasklist.sort((a, b) => {\r\n        if (a.status) {\r\n          return 1;\r\n        } else if (b.status) {\r\n          return -1;\r\n        }\r\n        return 0;\r\n      });\r\n\r\n      // save the task list in the local storage\r\n      localStorage.setItem(\"tasklist\", JSON.stringify(tasklist));\r\n\r\n      // set the tasklist to the state\r\n      this.setState({\r\n        // default color\r\n        // Incomplete: yellow\r\n        // complete: green\r\n        tasklist: tasklist.map((item, index) => {\r\n          let color = \"yellow\";\r\n          let cardBackground = { background: \"white\" };\r\n          let taskComplete = { textDecoration: \"none\" };\r\n\r\n          if (item.status) {\r\n            color = \"green\";\r\n            cardBackground.background = \"beige\";\r\n            taskComplete[\"textDecoration\"] = \"line-through\";\r\n          }\r\n          return (\r\n            <Card key={index} color={color} fluid style={cardBackground}>\r\n              <Card.Content>\r\n                <Card.Header textAlign=\"left\" style={taskComplete}>\r\n                  <div style={{ wordWrap: \"break-word\" }}>{item.task}</div>\r\n                </Card.Header>\r\n\r\n                <Card.Meta textAlign=\"right\">\r\n                  <Icon\r\n                    link\r\n                    name=\"check circle\"\r\n                    color=\"green\"\r\n                    onClick={() => this.updateTask(index)}\r\n                  />\r\n                  <span style={{ paddingRight: 10 }}>Done</span>\r\n                  <Icon\r\n                    link\r\n                    name=\"undo\"\r\n                    color=\"yellow\"\r\n                    onClick={() => this.undoTask(index)}\r\n                  />\r\n                  <span style={{ paddingRight: 10 }}>Undo</span>\r\n                  <Icon\r\n                    link\r\n                    name=\"delete\"\r\n                    color=\"red\"\r\n                    onClick={() => this.deleteTask(index)}\r\n                  />\r\n                  <span style={{ paddingRight: 10 }}>Delete</span>\r\n                </Card.Meta>\r\n              </Card.Content>\r\n            </Card>\r\n          );\r\n        })\r\n      });\r\n    }\r\n  };\r\n\r\n  // update the task status to true\r\n  updateTask = index => {\r\n    // get the task list from the local storage\r\n    let tasklist = JSON.parse(localStorage.getItem(\"tasklist\"));\r\n    // change status to true\r\n    tasklist[index].status = true;\r\n    // save the updated task list\r\n    localStorage.setItem(\"tasklist\", JSON.stringify(tasklist));\r\n    // refresh the task list\r\n    this.getTasks();\r\n  };\r\n\r\n  // undone the task status from true to false\r\n  undoTask = index => {\r\n    // get the task list from the local storage\r\n    let tasklist = JSON.parse(localStorage.getItem(\"tasklist\"));\r\n    // change status to false\r\n    tasklist[index].status = false;\r\n    // save the updated task list\r\n    localStorage.setItem(\"tasklist\", JSON.stringify(tasklist));\r\n    // refresh the task list\r\n    this.getTasks();\r\n  };\r\n\r\n  // delete the task from the task list\r\n  deleteTask = index => {\r\n    // get the task list from the local storage\r\n    let tasklist = JSON.parse(localStorage.getItem(\"tasklist\"));\r\n    // remove the task from the task list\r\n    tasklist.splice(index, 1);\r\n    // save the updated task list\r\n    localStorage.setItem(\"tasklist\", JSON.stringify(tasklist));\r\n    // refresh the task list\r\n    this.getTasks();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div>\r\n          <Header as=\"h1\">\r\n            <div className=\"app-header\">? To Do App</div>{\" \"}\r\n          </Header>\r\n        </div>\r\n        <div className=\"app-form\">\r\n          <Form onSubmit={this.onSubmit}>\r\n            <Input\r\n              type=\"text\"\r\n              name=\"task\"\r\n              onChange={this.onChange}\r\n              value={this.state.task}\r\n              fluid\r\n              placeholder=\"task...\"\r\n            />\r\n          </Form>\r\n        </div>\r\n        <div>\r\n          <Card.Group>{this.state.tasklist}</Card.Group>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MyTaskList;"]},"metadata":{},"sourceType":"module"}